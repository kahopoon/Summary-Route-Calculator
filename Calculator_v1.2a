// |---------------------------------------------------------|   
// |                                                   v1.2a |                                          
// |                Summary Route Calculator                 |
// |                                                         |
// |                        By kaho 5/2015  www.kahopoon.net |
// |---------------------------------------------------------|
// 
//  v1.0b
//  - bug fixed for not calculating network with larger than /8 subnet (That only occur at summary route). (Credit: Horace Ng, my tutor.)
//  - Checking of IP class with first octet only.
//
//  v1.1a
//  - Fixed checking error when any one of the octet value larger than 223.
//  - Check the class of IP first for performance.
//
//  v1.2a
//  - Function 'split' used. (Credit: Horace Ng, my tutor.)
//
//  v1.2b
//  - Test for github.

import java.io.*;

public class Calculator {

	public static void main(String[] args) throws IOException
	{
		System.out.println("        ****************************************");
		System.out.println("        *                                v1.2a *");
		System.out.println("        *       Summary Route Calculator       *");
		System.out.println("        *                                      *");
		System.out.println("        ****************************************");
		System.out.println("");
		
		//Gather, check and  transform information, covert to network address if necessary.
		int[][] datasave = new int [10][5];
		
		int count = 0;
		boolean stop = false;
		while (count < 10 && stop == false)
		{
			InputStreamReader keyboardin = new InputStreamReader(System.in);
			BufferedReader    input  = new BufferedReader( keyboardin );
			
			System.out.println("Please enter Network Address (E.g 10.0.0.0/8) Count:" + (count+1) + " Max:10");
			String inputdata =  input.readLine();
			
			//Basic error checking by syntax.
			boolean inputerror = false;
			for (int i = 0, x = 0, y = 0; i < inputdata.length(); i++)
			{
				if (inputdata.charAt(i) == '.')
				{
					x = x + 1;
				}
				if (inputdata.charAt(i) == '/')
				{
					y = y + 1;
				}
				if (i == inputdata.length() - 1)
				{
					if (x != 3 && y != 1)
					{
						inputerror = true;
					}
				}
			}
			
			//Basic checking completed, input store to variables for further checking. //Function 'split' used. -v1.2a
			if (inputerror == false)
			{
				 String[] inputnetwork = inputdata.split("/", 2);
				 String[] inputoctet = inputnetwork[0].split("\\.", 4);
				 int[] octet = new int [5];
				 octet[0] = Integer.parseInt(inputoctet[0]);
				 octet[1] = Integer.parseInt(inputoctet[1]);
				 octet[2] = Integer.parseInt(inputoctet[2]);
				 octet[3] = Integer.parseInt(inputoctet[3]);
				 octet[4] = Integer.parseInt(inputnetwork[1]);
				 
				 //Addition checking by value. //Fixed checking & check the class of IP first -v1.1a
				 if (octet[0] < 255 && octet[0] > 223) //"octet[i]" replace with "octect[0]", OR replace with AND. -v1.0b
				 {
					 System.out.println("Only Class A/B/C IP are supported.");
					 inputerror = true;
				 } 
				 else
				 {
					 for (int i = 0; i < 4; i++)
					 {
						 if (octet[i] > 255 || octet[i] < 0)
						 {
							 inputerror = true;
						 }
					 }
				 }
				 
				 //Store subnet information if checking passed.
				 int[] subnet = new int [] {0, 0, 0, 0};
				 if (octet[4] > 30 || octet[4] < 1) //"octet[4] < 8" replace with "octet[4] < 1" -v1.0b
				 {
					 inputerror = true;
					 if (octet[4] > 30 && octet[4] <= 32) //Added error reason for subnet between 31 to 32. -v1.0b
					 {
						 System.out.println("This network should has no host IP available.");
					 }
				 }
				 else					
				 {
					 if (octet[4] > 0 && octet[4] <= 8) //Added by "octet[4] < 8" replace with "octet[4] < 1" -v1.0b
					 {
						 subnet[0] = 256 - ((int) Math.pow(2, (8 - octet[4])));
					 }
					 else if (octet[4] > 8 && octet[4] <= 16)
					 {
						 subnet[0] = 255;
						 subnet[1] = 256 - ((int) Math.pow(2, (16 - octet[4])));
					 }
					 else if (octet[4] > 16 && octet[4] <= 24)
					 {
						 subnet[0] = 255;
						 subnet[1] = 255;
						 subnet[2] = 256 - ((int) Math.pow(2, (24 - octet[4])));
					 }
					 else if (octet[4] > 24 && octet[4] <= 30)
					 {
						 subnet[0] = 255;
						 subnet[1] = 255;
						 subnet[2] = 255;
						 subnet[3] = 256 - ((int) Math.pow(2, (30 - octet[4])));
					 }
				 }
				 
				 //Calculate network address if checking passed and user input a host address.
				 if (inputerror == false)
				 {
					 int[] hosttonetwork = new int [4];
					 for (int i = 0; i < 4; i++)
					 {
						 hosttonetwork[i] = octet[i] & subnet[i];
					 }
					 
					 //Save core data to variables.
					 datasave[count][0] = hosttonetwork[0];
					 datasave[count][1] = hosttonetwork[1];
					 datasave[count][2] = hosttonetwork[2];
					 datasave[count][3] = hosttonetwork[3];
					 datasave[count][4] = octet[4];
					 
					 boolean ishost = false;
					 for (int i = 0; i < 4; i++)
					 {
						 if (hosttonetwork[i] != octet[i])
						 {
							 ishost = true;
						 }
					 }
					 
					 //Inform user from host address to network address.
					 if (ishost)
					 {
						 System.out.println("You entered host address, translate to network address:");
					 } 
					 
					 //Inform user's input value.
					 System.out.println("Network Address: " + hosttonetwork[0] + "." + hosttonetwork[1] + "." + hosttonetwork[2] + "." + hosttonetwork[3] + " received.");
				 } 
			} 
			
			// "That about 25% of the hours spent writing an application are spent figuring out ways the end user will do something wrong." â€“ Brian Humes.
			if (inputerror)
			{
				 System.out.println("IP syntax error! Please try again.");
				 count = count - 1;
			}
			
			//Loop of more network for calculation (10 Max, 1 Stop).
			count = count + 1;
			System.out.println("More Network? (Y/N)");
			String morenetwork =  input.readLine();
			if (morenetwork.charAt(0) == 'N' || morenetwork.charAt(0) == 'n')
			{
				stop = true;
				if (count == 1)
				{
					System.out.println("Plese do not waste planet resources.");
				}
			}
		}
		
		//Do calculation when user enter more than one network.
		if (count > 1)
		{
			//Covert and show binary string.
			System.out.println("");
			System.out.println("Calculation:");
			System.out.println("---------------------------------------------------------");
			
			String[][] datastring = new String [10][4];
			for (int x = 0; x < count; x++)
			{
				for (int i = 0; i < 4; i++)
				{
					String temp = Integer.toBinaryString(datasave[x][i]);
					String result = "00000000".substring(0, 8 - temp.length()) + temp;
					datastring[x][i] = result;
				}
			}
			
			for (int i = 0; i < count; i++)
			{
				System.out.print(datastring[i][0] + "." + datastring[i][1] + "." + datastring[i][2] + "." + datastring[i][3]);
				System.out.println(" (Network: " + datasave[i][0] + "." + datasave[i][1] + "." + datasave[i][2] + "." + datasave[i][3] + "/" + datasave[i][4] + ")");
			}

			System.out.println("---------------------------------------------------------");
			System.out.println("");
			
			//Find the same binary. (Outer loop = octet change; Middle loop = each number of octet change; Inner loop = different network compare)
			int[] diffpos = new int [] {8, 8, 8, 8} ;
			for (int y = 0; y < 4; y++)
			{
				for (int x = 0; x < 8; x++)
				{
					char initvalue = datastring[0][y].charAt(x);
					for (int i = 1; i < count; i++)
					{
						if (datastring[i][y].charAt(x) != initvalue)
						{
							diffpos[y] = x;
							i = count;
							x = 8;
						}
					}
				}
			}
			
			//Encapsulate result.
			String resultmask = "";
			String result = "";
			int resultsmask = 0;
			for (int i = 0; i < 4; i++)
			{
				if (diffpos[i] == 8)
				{
					result = result + datastring[0][i];
				}
				else if (diffpos[i] != 8)
				{
					result = result + datastring[0][i].substring(0, diffpos[i]);
					i = 4;
				}
			}
			resultsmask = result.length();
			resultmask = "11111111111111111111111111111111".substring(0, result.length()) + "00000000000000000000000000000000".substring(0, 32 - result.length());
			result = result + "00000000000000000000000000000000".substring(0, 32 - result.length());
			
			//Result output (binary).
			System.out.println("Result in binary form:");
			System.out.println("---------------------------------------------------------");
			System.out.println(result.substring(0, 8) + "." + result.substring(8, 16) + "." + result.substring(16, 24) + "." + result.substring(24, 32) + " (Network Address)");
			System.out.println(resultmask.substring(0, 8) + "." + resultmask.substring(8, 16) + "." + resultmask.substring(16, 24) + "." + resultmask.substring(24, 32) + " (Subnet Mask)");
			System.out.println("---------------------------------------------------------");
			System.out.println("");
			
			//Result output (decimal).
			System.out.println("Result in decimal form:");
			System.out.println("---------------------------------------------------------");
			System.out.println(Integer.parseInt(result.substring(0, 8), 2) + "." + Integer.parseInt(result.substring(8, 16), 2) + "." + Integer.parseInt(result.substring(16, 24), 2) + "." + Integer.parseInt(result.substring(24, 32), 2) + " (Network Address)");
			System.out.println(Integer.parseInt(resultmask.substring(0, 8), 2) + "." + Integer.parseInt(resultmask.substring(8, 16), 2) + "." + Integer.parseInt(resultmask.substring(16, 24), 2) + "." + Integer.parseInt(resultmask.substring(24, 32), 2) + " (Subnet Mask)");
			System.out.println("= " + Integer.parseInt(result.substring(0, 8), 2) + "." + Integer.parseInt(result.substring(8, 16), 2) + "." + Integer.parseInt(result.substring(16, 24), 2) + "." + Integer.parseInt(result.substring(24, 32), 2) + "/" + resultsmask);
			System.out.println("---------------------------------------------------------");
			System.out.println("");
			
			//Class and Supernetting.
			char ipclass = 'C';
			String defaultmask = "/24 (255.255.255.0)";
			int defaultsmask = 24;
			if (Integer.parseInt(result.substring(0, 8), 2) < 192)
			{
				ipclass = 'B';
				defaultmask = "/16 (255.255.0.0)";
				defaultsmask = 16;
				if (Integer.parseInt(result.substring(0, 8), 2) < 128)
				{
					ipclass = 'A';
					defaultmask = "/8 (255.0.0.0)";
					defaultsmask = 8;
				}
			}
			
			//Supernetting calculation and output.
			System.out.println("Default class of " + Integer.parseInt(result.substring(0, 8), 2) + "." + Integer.parseInt(result.substring(8, 16), 2) + "." + Integer.parseInt(result.substring(16, 24), 2) + "." + Integer.parseInt(result.substring(24, 32), 2) + " : " + ipclass);
			System.out.println("Default subnet mask of " + Integer.parseInt(result.substring(0, 8), 2) + "." + Integer.parseInt(result.substring(8, 16), 2) + "." + Integer.parseInt(result.substring(16, 24), 2) + "." + Integer.parseInt(result.substring(24, 32), 2) + " : " + defaultmask);
			if (resultsmask < defaultsmask)
			{
				System.out.println("Supernetting: Yes");
			}
			else
			{
				System.out.println("Supernetting: No");
			}
			System.out.println("---------------------------------------------------------");
		}
		
		//End of Program.
		System.out.println("");
		System.out.println("End of Program, Goodbye!");
	}
}
